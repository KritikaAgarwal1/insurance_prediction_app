# -*- coding: utf-8 -*-
"""plt2deploy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14GxnSldSvWNTuz9io_AGrg60iTsH8Wqx
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

! pip install streamlit -q

!wget -q -O - ipv4.icanhzip.com

! streamlit run app.py & npx localtunnel --port 8501

df=pd.read_csv('TravelInsurancePrediction.csv')

df.head()

df.shape

df.columns

df=df.drop(['Unnamed: 0'],axis=1)

df.isnull().sum()

df['Employment Type'].unique()

from sklearn.preprocessing import LabelEncoder

encode=LabelEncoder()

df['Employment Type']=encode.fit_transform(df['Employment Type'])
df['GraduateOrNot']=encode.fit_transform(df['GraduateOrNot'])
df['FrequentFlyer']=encode.fit_transform(df['FrequentFlyer'])
df['EverTravelledAbroad']=encode.fit_transform(df['EverTravelledAbroad'])

df.head()

df.describe()

plt.figure(figsize=(8,6))
sns.heatmap(df.corr(),annot=True)
plt.show()

sns.countplot(x='ChronicDiseases',data=df,hue='TravelInsurance')

df.info()++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plt.boxplot(df['AnnualIncome'])

X=df.drop(['TravelInsurance'],axis=1)
y=df.TravelInsurance



from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix , accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model=DecisionTreeClassifier()

model.fit(X_train , y_train)

model.score(X_test,y_test)

y_pred=model.predict(X_test)

new_data_point = pd.DataFrame({
    'Age': [34],
    'Employment Type': [1],
    'GraduateOrNot': [1],
    'AnnualIncome': [500000],
    'FamilyMembers': [4],
    'ChronicDiseases': [1],
    'FrequentFlyer': [0],
    'EverTravelledAbroad': [0]
})

pred=model.predict(new_data_point)

if pred==0:
  print("Travel Insurance Not Purchased")
else:
  print("Travel Insurance Purchased")

acc=accuracy_score(y_test,y_pred)

print('Accuracy Score of the model is',acc)

cm=confusion_matrix(y_test , y_pred)

sns.heatmap(cm,annot=True)

